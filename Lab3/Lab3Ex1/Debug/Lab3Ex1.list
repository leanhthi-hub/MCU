
Lab3Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002920  08002920  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002920  08002920  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002920  08002920  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  08002954  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002954  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000967e  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c69  00000000  00000000  000296d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d7d  00000000  00000000  0002c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be93  00000000  00000000  000434e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008202f  00000000  00000000  0004f378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d13a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000294c  00000000  00000000  000d13fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028e8 	.word	0x080028e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080028e8 	.word	0x080028e8

0800014c <displaySeg7>:
 *  Created on: Oct 4, 2022
 *      Author: Leanhthi
 */
#include "main.h"
#include "Led7segment.h"
void displaySeg7(int count_time){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <displaySeg7+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <displaySeg7+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch(count_time){
			case 0:{
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	; (8000464 <displaySeg7+0x318>)
 8000192:	f001 fb98 	bl	80018c6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <displaySeg7+0x318>)
 800019c:	f001 fb93 	bl	80018c6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	; (8000464 <displaySeg7+0x318>)
 80001a6:	f001 fb8e 	bl	80018c6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	; (8000464 <displaySeg7+0x318>)
 80001b0:	f001 fb89 	bl	80018c6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	; (8000464 <displaySeg7+0x318>)
 80001ba:	f001 fb84 	bl	80018c6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,0);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	; (8000464 <displaySeg7+0x318>)
 80001c4:	f001 fb7f 	bl	80018c6 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,1);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	; (8000464 <displaySeg7+0x318>)
 80001ce:	f001 fb7a 	bl	80018c6 <HAL_GPIO_WritePin>
					  break ;
 80001d2:	e143      	b.n	800045c <displaySeg7+0x310>
					  };
			  case 1:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	; (8000464 <displaySeg7+0x318>)
 80001da:	f001 fb74 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <displaySeg7+0x318>)
 80001e4:	f001 fb6f 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	; (8000464 <displaySeg7+0x318>)
 80001ee:	f001 fb6a 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	; (8000464 <displaySeg7+0x318>)
 80001f8:	f001 fb65 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	; (8000464 <displaySeg7+0x318>)
 8000202:	f001 fb60 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,1);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	; (8000464 <displaySeg7+0x318>)
 800020c:	f001 fb5b 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,1);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <displaySeg7+0x318>)
 8000216:	f001 fb56 	bl	80018c6 <HAL_GPIO_WritePin>
				  break ;
 800021a:	e11f      	b.n	800045c <displaySeg7+0x310>
				  };
			  case 2:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <displaySeg7+0x318>)
 8000222:	f001 fb50 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	; (8000464 <displaySeg7+0x318>)
 800022c:	f001 fb4b 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,1);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	; (8000464 <displaySeg7+0x318>)
 8000236:	f001 fb46 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <displaySeg7+0x318>)
 8000240:	f001 fb41 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,0);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	; (8000464 <displaySeg7+0x318>)
 800024a:	f001 fb3c 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,1);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	; (8000464 <displaySeg7+0x318>)
 8000254:	f001 fb37 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	; (8000464 <displaySeg7+0x318>)
 800025e:	f001 fb32 	bl	80018c6 <HAL_GPIO_WritePin>
				   break ;
 8000262:	e0fb      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 3: {
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	; (8000464 <displaySeg7+0x318>)
 800026a:	f001 fb2c 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	; (8000464 <displaySeg7+0x318>)
 8000274:	f001 fb27 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	; (8000464 <displaySeg7+0x318>)
 800027e:	f001 fb22 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	; (8000464 <displaySeg7+0x318>)
 8000288:	f001 fb1d 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,1);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <displaySeg7+0x318>)
 8000292:	f001 fb18 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,1);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <displaySeg7+0x318>)
 800029c:	f001 fb13 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	; (8000464 <displaySeg7+0x318>)
 80002a6:	f001 fb0e 	bl	80018c6 <HAL_GPIO_WritePin>
				  break;
 80002aa:	e0d7      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 4:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	; (8000464 <displaySeg7+0x318>)
 80002b2:	f001 fb08 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	; (8000464 <displaySeg7+0x318>)
 80002bc:	f001 fb03 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <displaySeg7+0x318>)
 80002c6:	f001 fafe 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	; (8000464 <displaySeg7+0x318>)
 80002d0:	f001 faf9 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <displaySeg7+0x318>)
 80002da:	f001 faf4 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <displaySeg7+0x318>)
 80002e4:	f001 faef 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <displaySeg7+0x318>)
 80002ee:	f001 faea 	bl	80018c6 <HAL_GPIO_WritePin>
				  break;
 80002f2:	e0b3      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 5:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	; (8000464 <displaySeg7+0x318>)
 80002fa:	f001 fae4 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,1);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	; (8000464 <displaySeg7+0x318>)
 8000304:	f001 fadf 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <displaySeg7+0x318>)
 800030e:	f001 fada 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	; (8000464 <displaySeg7+0x318>)
 8000318:	f001 fad5 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,1);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	; (8000464 <displaySeg7+0x318>)
 8000322:	f001 fad0 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,0);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	; (8000464 <displaySeg7+0x318>)
 800032c:	f001 facb 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <displaySeg7+0x318>)
 8000336:	f001 fac6 	bl	80018c6 <HAL_GPIO_WritePin>


				  break;
 800033a:	e08f      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 6:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	; (8000464 <displaySeg7+0x318>)
 8000342:	f001 fac0 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,1);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	; (8000464 <displaySeg7+0x318>)
 800034c:	f001 fabb 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	; (8000464 <displaySeg7+0x318>)
 8000356:	f001 fab6 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <displaySeg7+0x318>)
 8000360:	f001 fab1 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,0);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <displaySeg7+0x318>)
 800036a:	f001 faac 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,0);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	; (8000464 <displaySeg7+0x318>)
 8000374:	f001 faa7 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <displaySeg7+0x318>)
 800037e:	f001 faa2 	bl	80018c6 <HAL_GPIO_WritePin>
				  break;
 8000382:	e06b      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 7:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <displaySeg7+0x318>)
 800038a:	f001 fa9c 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	; (8000464 <displaySeg7+0x318>)
 8000394:	f001 fa97 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <displaySeg7+0x318>)
 800039e:	f001 fa92 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	; (8000464 <displaySeg7+0x318>)
 80003a8:	f001 fa8d 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <displaySeg7+0x318>)
 80003b2:	f001 fa88 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	; (8000464 <displaySeg7+0x318>)
 80003bc:	f001 fa83 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <displaySeg7+0x318>)
 80003c6:	f001 fa7e 	bl	80018c6 <HAL_GPIO_WritePin>

				  break;
 80003ca:	e047      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 8:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <displaySeg7+0x318>)
 80003d2:	f001 fa78 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <displaySeg7+0x318>)
 80003dc:	f001 fa73 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <displaySeg7+0x318>)
 80003e6:	f001 fa6e 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	; (8000464 <displaySeg7+0x318>)
 80003f0:	f001 fa69 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	; (8000464 <displaySeg7+0x318>)
 80003fa:	f001 fa64 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,0);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <displaySeg7+0x318>)
 8000404:	f001 fa5f 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <displaySeg7+0x318>)
 800040e:	f001 fa5a 	bl	80018c6 <HAL_GPIO_WritePin>
						  break;
 8000412:	e023      	b.n	800045c <displaySeg7+0x310>
			  };
			  case 9:{
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_4,1);
 8000414:	2201      	movs	r2, #1
 8000416:	2110      	movs	r1, #16
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <displaySeg7+0x318>)
 800041a:	f001 fa54 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_0,0);
 800041e:	2200      	movs	r2, #0
 8000420:	2101      	movs	r1, #1
 8000422:	4810      	ldr	r0, [pc, #64]	; (8000464 <displaySeg7+0x318>)
 8000424:	f001 fa4f 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_1,0);
 8000428:	2200      	movs	r2, #0
 800042a:	2102      	movs	r1, #2
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <displaySeg7+0x318>)
 800042e:	f001 fa4a 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_2,0);
 8000432:	2200      	movs	r2, #0
 8000434:	2104      	movs	r1, #4
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <displaySeg7+0x318>)
 8000438:	f001 fa45 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_3,0);
 800043c:	2200      	movs	r2, #0
 800043e:	2108      	movs	r1, #8
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <displaySeg7+0x318>)
 8000442:	f001 fa40 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_5,0);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <displaySeg7+0x318>)
 800044c:	f001 fa3b 	bl	80018c6 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED7PORT,GPIO_PIN_6,0);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <displaySeg7+0x318>)
 8000456:	f001 fa36 	bl	80018c6 <HAL_GPIO_WritePin>

				  break;
 800045a:	bf00      	nop
			  };

			  };

}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <update7SEG>:
 *
 *  Created on: Oct 5, 2022
 *      Author: Leanhthi
 */
#include "Update7Seg.h"
void update7SEG (int index ){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
switch( index_led ){
 8000470:	4b55      	ldr	r3, [pc, #340]	; (80005c8 <update7SEG+0x160>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b03      	cmp	r3, #3
 8000476:	f200 808b 	bhi.w	8000590 <update7SEG+0x128>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <update7SEG+0x18>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	08000491 	.word	0x08000491
 8000484:	080004cf 	.word	0x080004cf
 8000488:	0800050d 	.word	0x0800050d
 800048c:	0800054b 	.word	0x0800054b
	case 0:
		//Displaythefirst7SEGwithled_buffer[0]
		displaySeg7(led_buffer[index_led]);
 8000490:	4b4d      	ldr	r3, [pc, #308]	; (80005c8 <update7SEG+0x160>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a4d      	ldr	r2, [pc, #308]	; (80005cc <update7SEG+0x164>)
 8000496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fe56 	bl	800014c <displaySeg7>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	484a      	ldr	r0, [pc, #296]	; (80005d0 <update7SEG+0x168>)
 80004a6:	f001 fa0e 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	4848      	ldr	r0, [pc, #288]	; (80005d0 <update7SEG+0x168>)
 80004b0:	f001 fa09 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4845      	ldr	r0, [pc, #276]	; (80005d0 <update7SEG+0x168>)
 80004bc:	f001 fa03 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4842      	ldr	r0, [pc, #264]	; (80005d0 <update7SEG+0x168>)
 80004c8:	f001 f9fd 	bl	80018c6 <HAL_GPIO_WritePin>
		break;
 80004cc:	e077      	b.n	80005be <update7SEG+0x156>
	case 1:
		//Displaythesecond7SEGwithled_buffer[1]
		displaySeg7(led_buffer[index_led]);
 80004ce:	4b3e      	ldr	r3, [pc, #248]	; (80005c8 <update7SEG+0x160>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a3e      	ldr	r2, [pc, #248]	; (80005cc <update7SEG+0x164>)
 80004d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe37 	bl	800014c <displaySeg7>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2140      	movs	r1, #64	; 0x40
 80004e2:	483b      	ldr	r0, [pc, #236]	; (80005d0 <update7SEG+0x168>)
 80004e4:	f001 f9ef 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	4838      	ldr	r0, [pc, #224]	; (80005d0 <update7SEG+0x168>)
 80004ee:	f001 f9ea 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	4835      	ldr	r0, [pc, #212]	; (80005d0 <update7SEG+0x168>)
 80004fa:	f001 f9e4 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000504:	4832      	ldr	r0, [pc, #200]	; (80005d0 <update7SEG+0x168>)
 8000506:	f001 f9de 	bl	80018c6 <HAL_GPIO_WritePin>
		break;
 800050a:	e058      	b.n	80005be <update7SEG+0x156>
	case 2:
		//Displaythethird7SEGwithled_buffer[2]
		displaySeg7(led_buffer[index_led]);
 800050c:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <update7SEG+0x160>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a2e      	ldr	r2, [pc, #184]	; (80005cc <update7SEG+0x164>)
 8000512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe18 	bl	800014c <displaySeg7>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	482b      	ldr	r0, [pc, #172]	; (80005d0 <update7SEG+0x168>)
 8000522:	f001 f9d0 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	4829      	ldr	r0, [pc, #164]	; (80005d0 <update7SEG+0x168>)
 800052c:	f001 f9cb 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	4826      	ldr	r0, [pc, #152]	; (80005d0 <update7SEG+0x168>)
 8000538:	f001 f9c5 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <update7SEG+0x168>)
 8000544:	f001 f9bf 	bl	80018c6 <HAL_GPIO_WritePin>
		break;
 8000548:	e039      	b.n	80005be <update7SEG+0x156>
	case 3:
		//Displaytheforth7SEGwithled_buffer[3]
		displaySeg7(led_buffer[index_led]);
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <update7SEG+0x160>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a1f      	ldr	r2, [pc, #124]	; (80005cc <update7SEG+0x164>)
 8000550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fdf9 	bl	800014c <displaySeg7>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	481c      	ldr	r0, [pc, #112]	; (80005d0 <update7SEG+0x168>)
 8000560:	f001 f9b1 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <update7SEG+0x168>)
 800056a:	f001 f9ac 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <update7SEG+0x168>)
 8000576:	f001 f9a6 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <update7SEG+0x168>)
 8000582:	f001 f9a0 	bl	80018c6 <HAL_GPIO_WritePin>
		index_led=-1;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <update7SEG+0x160>)
 8000588:	f04f 32ff 	mov.w	r2, #4294967295
 800058c:	601a      	str	r2, [r3, #0]
		break;
 800058e:	e016      	b.n	80005be <update7SEG+0x156>
	default:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <update7SEG+0x168>)
 8000596:	f001 f996 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <update7SEG+0x168>)
 80005a0:	f001 f991 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <update7SEG+0x168>)
 80005ac:	f001 f98b 	bl	80018c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <update7SEG+0x168>)
 80005b8:	f001 f985 	bl	80018c6 <HAL_GPIO_WritePin>
		break;
 80005bc:	bf00      	nop
	}
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000060 	.word	0x20000060
 80005cc:	20000098 	.word	0x20000098
 80005d0:	40010800 	.word	0x40010800

080005d4 <toogleRed>:
 *  Created on: Nov 2, 2022
 *      Author: Leanhthi
 */
#include "fsm.h"

void toogleRed(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <toogleRed+0x28>)
 80005de:	f001 f972 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2102      	movs	r1, #2
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <toogleRed+0x28>)
 80005e8:	f001 f96d 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2104      	movs	r1, #4
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <toogleRed+0x28>)
 80005f2:	f001 f968 	bl	80018c6 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010800 	.word	0x40010800

08000600 <toogleGreen>:
void toogleGreen(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <toogleGreen+0x28>)
 800060a:	f001 f95c 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2102      	movs	r1, #2
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <toogleGreen+0x28>)
 8000614:	f001 f957 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2104      	movs	r1, #4
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <toogleGreen+0x28>)
 800061e:	f001 f952 	bl	80018c6 <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40010800 	.word	0x40010800

0800062c <toogleYellow>:
void toogleYellow(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <toogleYellow+0x28>)
 8000636:	f001 f946 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <toogleYellow+0x28>)
 8000640:	f001 f941 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2104      	movs	r1, #4
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <toogleYellow+0x28>)
 800064a:	f001 f93c 	bl	80018c6 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40010800 	.word	0x40010800

08000658 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch (status1	) {
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <fsm_automatic_run1+0xe0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a36      	ldr	r2, [pc, #216]	; (800073c <fsm_automatic_run1+0xe4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d00b      	beq.n	800067e <fsm_automatic_run1+0x26>
 8000666:	4a35      	ldr	r2, [pc, #212]	; (800073c <fsm_automatic_run1+0xe4>)
 8000668:	4293      	cmp	r3, r2
 800066a:	dc5c      	bgt.n	8000726 <fsm_automatic_run1+0xce>
 800066c:	2b03      	cmp	r3, #3
 800066e:	d041      	beq.n	80006f4 <fsm_automatic_run1+0x9c>
 8000670:	2b03      	cmp	r3, #3
 8000672:	dc58      	bgt.n	8000726 <fsm_automatic_run1+0xce>
 8000674:	2b01      	cmp	r3, #1
 8000676:	d00b      	beq.n	8000690 <fsm_automatic_run1+0x38>
 8000678:	2b02      	cmp	r3, #2
 800067a:	d022      	beq.n	80006c2 <fsm_automatic_run1+0x6a>



			break;
		default:
			break;
 800067c:	e053      	b.n	8000726 <fsm_automatic_run1+0xce>
			status1 = AUTO_RED;
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <fsm_automatic_run1+0xe0>)
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]
			setTimer1(RED_TIME);
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <fsm_automatic_run1+0xe8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fd11 	bl	80010b0 <setTimer1>
			break;
 800068e:	e051      	b.n	8000734 <fsm_automatic_run1+0xdc>
			toogleRed();
 8000690:	f7ff ffa0 	bl	80005d4 <toogleRed>
			if(timer1_flag==1){
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <fsm_automatic_run1+0xec>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d146      	bne.n	800072a <fsm_automatic_run1+0xd2>
				status1 = AUTO_GREEN;
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <fsm_automatic_run1+0xe0>)
 800069e:	2202      	movs	r2, #2
 80006a0:	601a      	str	r2, [r3, #0]
				setTimer1(GREEN_TIME);
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <fsm_automatic_run1+0xf0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fd02 	bl	80010b0 <setTimer1>
				timer=GREEN_TIME/100;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <fsm_automatic_run1+0xf0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a26      	ldr	r2, [pc, #152]	; (800074c <fsm_automatic_run1+0xf4>)
 80006b2:	fb82 1203 	smull	r1, r2, r2, r3
 80006b6:	1152      	asrs	r2, r2, #5
 80006b8:	17db      	asrs	r3, r3, #31
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4a24      	ldr	r2, [pc, #144]	; (8000750 <fsm_automatic_run1+0xf8>)
 80006be:	6013      	str	r3, [r2, #0]
			break;
 80006c0:	e033      	b.n	800072a <fsm_automatic_run1+0xd2>
			toogleGreen();
 80006c2:	f7ff ff9d 	bl	8000600 <toogleGreen>
			if(timer1_flag==1){
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <fsm_automatic_run1+0xec>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d12f      	bne.n	800072e <fsm_automatic_run1+0xd6>
				status1 = AUTO_YELLOW;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <fsm_automatic_run1+0xe0>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	601a      	str	r2, [r3, #0]
				setTimer1(YELLOW_TIME);
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <fsm_automatic_run1+0xfc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fce9 	bl	80010b0 <setTimer1>
				timer=YELLOW_TIME/100;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <fsm_automatic_run1+0xfc>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <fsm_automatic_run1+0xf4>)
 80006e4:	fb82 1203 	smull	r1, r2, r2, r3
 80006e8:	1152      	asrs	r2, r2, #5
 80006ea:	17db      	asrs	r3, r3, #31
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <fsm_automatic_run1+0xf8>)
 80006f0:	6013      	str	r3, [r2, #0]
			break;
 80006f2:	e01c      	b.n	800072e <fsm_automatic_run1+0xd6>
			toogleYellow();
 80006f4:	f7ff ff9a 	bl	800062c <toogleYellow>
			if(timer1_flag==1){
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <fsm_automatic_run1+0xec>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d118      	bne.n	8000732 <fsm_automatic_run1+0xda>
				status1 = AUTO_RED;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <fsm_automatic_run1+0xe0>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
				setTimer1(RED_TIME);
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <fsm_automatic_run1+0xe8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fcd0 	bl	80010b0 <setTimer1>
				timer=RED_TIME/100;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <fsm_automatic_run1+0xe8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <fsm_automatic_run1+0xf4>)
 8000716:	fb82 1203 	smull	r1, r2, r2, r3
 800071a:	1152      	asrs	r2, r2, #5
 800071c:	17db      	asrs	r3, r3, #31
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <fsm_automatic_run1+0xf8>)
 8000722:	6013      	str	r3, [r2, #0]
			break;
 8000724:	e005      	b.n	8000732 <fsm_automatic_run1+0xda>
			break;
 8000726:	bf00      	nop
 8000728:	e004      	b.n	8000734 <fsm_automatic_run1+0xdc>
			break;
 800072a:	bf00      	nop
 800072c:	e002      	b.n	8000734 <fsm_automatic_run1+0xdc>
			break;
 800072e:	bf00      	nop
 8000730:	e000      	b.n	8000734 <fsm_automatic_run1+0xdc>
			break;
 8000732:	bf00      	nop
	}
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	01605b22 	.word	0x01605b22
 8000740:	2000000c 	.word	0x2000000c
 8000744:	2000006c 	.word	0x2000006c
 8000748:	20000014 	.word	0x20000014
 800074c:	51eb851f 	.word	0x51eb851f
 8000750:	20000010 	.word	0x20000010
 8000754:	2000001c 	.word	0x2000001c

08000758 <toogleRed1>:
 *  Created on: Nov 3, 2022
 *      Author: Leanhthi
 */
#include "fsm.h"

void toogleRed1(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2108      	movs	r1, #8
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <toogleRed1+0x28>)
 8000762:	f001 f8b0 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2110      	movs	r1, #16
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <toogleRed1+0x28>)
 800076c:	f001 f8ab 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <toogleRed1+0x28>)
 8000776:	f001 f8a6 	bl	80018c6 <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010800 	.word	0x40010800

08000784 <toogleGreen1>:
void toogleGreen1(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <toogleGreen1+0x28>)
 800078e:	f001 f89a 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2110      	movs	r1, #16
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <toogleGreen1+0x28>)
 8000798:	f001 f895 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <toogleGreen1+0x28>)
 80007a2:	f001 f890 	bl	80018c6 <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40010800 	.word	0x40010800

080007b0 <toogleYellow1>:
void toogleYellow1(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2108      	movs	r1, #8
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <toogleYellow1+0x28>)
 80007ba:	f001 f884 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2110      	movs	r1, #16
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <toogleYellow1+0x28>)
 80007c4:	f001 f87f 	bl	80018c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <toogleYellow1+0x28>)
 80007ce:	f001 f87a 	bl	80018c6 <HAL_GPIO_WritePin>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40010800 	.word	0x40010800

080007dc <fsm_automatic_run2>:

void fsm_automatic_run2(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	switch (status2	) {
 80007e0:	4b36      	ldr	r3, [pc, #216]	; (80008bc <fsm_automatic_run2+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a36      	ldr	r2, [pc, #216]	; (80008c0 <fsm_automatic_run2+0xe4>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d00b      	beq.n	8000802 <fsm_automatic_run2+0x26>
 80007ea:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <fsm_automatic_run2+0xe4>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	dc5c      	bgt.n	80008aa <fsm_automatic_run2+0xce>
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d041      	beq.n	8000878 <fsm_automatic_run2+0x9c>
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	dc58      	bgt.n	80008aa <fsm_automatic_run2+0xce>
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d00b      	beq.n	8000814 <fsm_automatic_run2+0x38>
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d022      	beq.n	8000846 <fsm_automatic_run2+0x6a>



			break;
		default:
			break;
 8000800:	e053      	b.n	80008aa <fsm_automatic_run2+0xce>
			status2 = AUTO_GREEN;
 8000802:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <fsm_automatic_run2+0xe0>)
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
			setTimer2(GREEN_TIME);
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <fsm_automatic_run2+0xe8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fc63 	bl	80010d8 <setTimer2>
			break;
 8000812:	e051      	b.n	80008b8 <fsm_automatic_run2+0xdc>
			toogleRed1();
 8000814:	f7ff ffa0 	bl	8000758 <toogleRed1>
			if(timer2_flag==1){
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <fsm_automatic_run2+0xec>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d146      	bne.n	80008ae <fsm_automatic_run2+0xd2>
				status2 = AUTO_GREEN;
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <fsm_automatic_run2+0xe0>)
 8000822:	2202      	movs	r2, #2
 8000824:	601a      	str	r2, [r3, #0]
				setTimer2(GREEN_TIME);
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <fsm_automatic_run2+0xe8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fc54 	bl	80010d8 <setTimer2>
				timer2=GREEN_TIME/100;
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <fsm_automatic_run2+0xe8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a25      	ldr	r2, [pc, #148]	; (80008cc <fsm_automatic_run2+0xf0>)
 8000836:	fb82 1203 	smull	r1, r2, r2, r3
 800083a:	1152      	asrs	r2, r2, #5
 800083c:	17db      	asrs	r3, r3, #31
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <fsm_automatic_run2+0xf4>)
 8000842:	6013      	str	r3, [r2, #0]
			break;
 8000844:	e033      	b.n	80008ae <fsm_automatic_run2+0xd2>
			toogleGreen1();
 8000846:	f7ff ff9d 	bl	8000784 <toogleGreen1>
			if(timer2_flag==1){
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <fsm_automatic_run2+0xec>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d12f      	bne.n	80008b2 <fsm_automatic_run2+0xd6>
				status2 = AUTO_YELLOW;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <fsm_automatic_run2+0xe0>)
 8000854:	2203      	movs	r2, #3
 8000856:	601a      	str	r2, [r3, #0]
				setTimer2(YELLOW_TIME);
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <fsm_automatic_run2+0xf8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fc3b 	bl	80010d8 <setTimer2>
				timer2=YELLOW_TIME/100;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <fsm_automatic_run2+0xf8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a19      	ldr	r2, [pc, #100]	; (80008cc <fsm_automatic_run2+0xf0>)
 8000868:	fb82 1203 	smull	r1, r2, r2, r3
 800086c:	1152      	asrs	r2, r2, #5
 800086e:	17db      	asrs	r3, r3, #31
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <fsm_automatic_run2+0xf4>)
 8000874:	6013      	str	r3, [r2, #0]
			break;
 8000876:	e01c      	b.n	80008b2 <fsm_automatic_run2+0xd6>
			toogleYellow1();
 8000878:	f7ff ff9a 	bl	80007b0 <toogleYellow1>
			if(timer2_flag==1){
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <fsm_automatic_run2+0xec>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d118      	bne.n	80008b6 <fsm_automatic_run2+0xda>
				status2 = AUTO_RED;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <fsm_automatic_run2+0xe0>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
				setTimer2(RED_TIME);
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <fsm_automatic_run2+0xfc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fc22 	bl	80010d8 <setTimer2>
				timer2=RED_TIME/100;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <fsm_automatic_run2+0xfc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <fsm_automatic_run2+0xf0>)
 800089a:	fb82 1203 	smull	r1, r2, r2, r3
 800089e:	1152      	asrs	r2, r2, #5
 80008a0:	17db      	asrs	r3, r3, #31
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <fsm_automatic_run2+0xf4>)
 80008a6:	6013      	str	r3, [r2, #0]
			break;
 80008a8:	e005      	b.n	80008b6 <fsm_automatic_run2+0xda>
			break;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <fsm_automatic_run2+0xdc>
			break;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <fsm_automatic_run2+0xdc>
			break;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <fsm_automatic_run2+0xdc>
			break;
 80008b6:	bf00      	nop
	}
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000004 	.word	0x20000004
 80008c0:	01605b22 	.word	0x01605b22
 80008c4:	20000014 	.word	0x20000014
 80008c8:	20000074 	.word	0x20000074
 80008cc:	51eb851f 	.word	0x51eb851f
 80008d0:	20000018 	.word	0x20000018
 80008d4:	2000001c 	.word	0x2000001c
 80008d8:	2000000c 	.word	0x2000000c

080008dc <fsm_automatic_run3>:
 *      Author: Leanhthi
 */

#include "fsm.h"

void fsm_automatic_run3(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	switch (status3	) {
 80008e0:	4b96      	ldr	r3, [pc, #600]	; (8000b3c <fsm_automatic_run3+0x260>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a96      	ldr	r2, [pc, #600]	; (8000b40 <fsm_automatic_run3+0x264>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d041      	beq.n	800096e <fsm_automatic_run3+0x92>
 80008ea:	4a95      	ldr	r2, [pc, #596]	; (8000b40 <fsm_automatic_run3+0x264>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	f300 811a 	bgt.w	8000b26 <fsm_automatic_run3+0x24a>
 80008f2:	2b64      	cmp	r3, #100	; 0x64
 80008f4:	d00e      	beq.n	8000914 <fsm_automatic_run3+0x38>
 80008f6:	2b64      	cmp	r3, #100	; 0x64
 80008f8:	f300 8115 	bgt.w	8000b26 <fsm_automatic_run3+0x24a>
 80008fc:	2b0d      	cmp	r3, #13
 80008fe:	f000 80d3 	beq.w	8000aa8 <fsm_automatic_run3+0x1cc>
 8000902:	2b0d      	cmp	r3, #13
 8000904:	f300 810f 	bgt.w	8000b26 <fsm_automatic_run3+0x24a>
 8000908:	2b0b      	cmp	r3, #11
 800090a:	d03a      	beq.n	8000982 <fsm_automatic_run3+0xa6>
 800090c:	2b0c      	cmp	r3, #12
 800090e:	f000 8082 	beq.w	8000a16 <fsm_automatic_run3+0x13a>


			break;

		default:
			break;
 8000912:	e108      	b.n	8000b26 <fsm_automatic_run3+0x24a>
			if( timer0_flag == 1) {
 8000914:	4b8b      	ldr	r3, [pc, #556]	; (8000b44 <fsm_automatic_run3+0x268>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10c      	bne.n	8000936 <fsm_automatic_run3+0x5a>
					  timer--;
 800091c:	4b8a      	ldr	r3, [pc, #552]	; (8000b48 <fsm_automatic_run3+0x26c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a89      	ldr	r2, [pc, #548]	; (8000b48 <fsm_automatic_run3+0x26c>)
 8000924:	6013      	str	r3, [r2, #0]
					  timer2--;
 8000926:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3b01      	subs	r3, #1
 800092c:	4a87      	ldr	r2, [pc, #540]	; (8000b4c <fsm_automatic_run3+0x270>)
 800092e:	6013      	str	r3, [r2, #0]
					  setTimer0 (100) ;
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 fba9 	bl	8001088 <setTimer0>
			if(button_flag[0]==1){
 8000936:	4b86      	ldr	r3, [pc, #536]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	f040 80f5 	bne.w	8000b2a <fsm_automatic_run3+0x24e>
				button_flag[0]=0;
 8000940:	4b83      	ldr	r3, [pc, #524]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
				status1=Waiting;
 8000946:	4b83      	ldr	r3, [pc, #524]	; (8000b54 <fsm_automatic_run3+0x278>)
 8000948:	2263      	movs	r2, #99	; 0x63
 800094a:	601a      	str	r2, [r3, #0]
				status2=Waiting;
 800094c:	4b82      	ldr	r3, [pc, #520]	; (8000b58 <fsm_automatic_run3+0x27c>)
 800094e:	2263      	movs	r2, #99	; 0x63
 8000950:	601a      	str	r2, [r3, #0]
				status3=MAN_RED;
 8000952:	4b7a      	ldr	r3, [pc, #488]	; (8000b3c <fsm_automatic_run3+0x260>)
 8000954:	220b      	movs	r2, #11
 8000956:	601a      	str	r2, [r3, #0]
				timer2=RED_TIME/100;
 8000958:	4b80      	ldr	r3, [pc, #512]	; (8000b5c <fsm_automatic_run3+0x280>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a80      	ldr	r2, [pc, #512]	; (8000b60 <fsm_automatic_run3+0x284>)
 800095e:	fb82 1203 	smull	r1, r2, r2, r3
 8000962:	1152      	asrs	r2, r2, #5
 8000964:	17db      	asrs	r3, r3, #31
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	4a78      	ldr	r2, [pc, #480]	; (8000b4c <fsm_automatic_run3+0x270>)
 800096a:	6013      	str	r3, [r2, #0]
			break;
 800096c:	e0dd      	b.n	8000b2a <fsm_automatic_run3+0x24e>
			status1=INIT;
 800096e:	4b79      	ldr	r3, [pc, #484]	; (8000b54 <fsm_automatic_run3+0x278>)
 8000970:	4a73      	ldr	r2, [pc, #460]	; (8000b40 <fsm_automatic_run3+0x264>)
 8000972:	601a      	str	r2, [r3, #0]
			status2=INIT;
 8000974:	4b78      	ldr	r3, [pc, #480]	; (8000b58 <fsm_automatic_run3+0x27c>)
 8000976:	4a72      	ldr	r2, [pc, #456]	; (8000b40 <fsm_automatic_run3+0x264>)
 8000978:	601a      	str	r2, [r3, #0]
			status3=RUNNING;
 800097a:	4b70      	ldr	r3, [pc, #448]	; (8000b3c <fsm_automatic_run3+0x260>)
 800097c:	2264      	movs	r2, #100	; 0x64
 800097e:	601a      	str	r2, [r3, #0]
			break;
 8000980:	e0da      	b.n	8000b38 <fsm_automatic_run3+0x25c>
			toogleRed();
 8000982:	f7ff fe27 	bl	80005d4 <toogleRed>
			toogleRed1();
 8000986:	f7ff fee7 	bl	8000758 <toogleRed1>
			if(timer2>99)timer2=0;
 800098a:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <fsm_automatic_run3+0x270>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b63      	cmp	r3, #99	; 0x63
 8000990:	dd02      	ble.n	8000998 <fsm_automatic_run3+0xbc>
 8000992:	4b6e      	ldr	r3, [pc, #440]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
			timer=01;
 8000998:	4b6b      	ldr	r3, [pc, #428]	; (8000b48 <fsm_automatic_run3+0x26c>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
			if(button_flag[0]==1){
 800099e:	4b6c      	ldr	r3, [pc, #432]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d10f      	bne.n	80009c6 <fsm_automatic_run3+0xea>
				button_flag[0]=0;
 80009a6:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
				timer2=GREEN_TIME/100;
 80009ac:	4b6d      	ldr	r3, [pc, #436]	; (8000b64 <fsm_automatic_run3+0x288>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a6b      	ldr	r2, [pc, #428]	; (8000b60 <fsm_automatic_run3+0x284>)
 80009b2:	fb82 1203 	smull	r1, r2, r2, r3
 80009b6:	1152      	asrs	r2, r2, #5
 80009b8:	17db      	asrs	r3, r3, #31
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a63      	ldr	r2, [pc, #396]	; (8000b4c <fsm_automatic_run3+0x270>)
 80009be:	6013      	str	r3, [r2, #0]
				status3=MAN_GREEN;
 80009c0:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <fsm_automatic_run3+0x260>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
			if(button_flag[1]==1){
 80009c6:	4b62      	ldr	r3, [pc, #392]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d107      	bne.n	80009de <fsm_automatic_run3+0x102>
				button_flag[1]=0;
 80009ce:	4b60      	ldr	r3, [pc, #384]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
				timer2++;
 80009d4:	4b5d      	ldr	r3, [pc, #372]	; (8000b4c <fsm_automatic_run3+0x270>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a5c      	ldr	r2, [pc, #368]	; (8000b4c <fsm_automatic_run3+0x270>)
 80009dc:	6013      	str	r3, [r2, #0]
			if(button_flag[2]==1){
 80009de:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d107      	bne.n	80009f6 <fsm_automatic_run3+0x11a>
				button_flag[2]=0;
 80009e6:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
				timer2--;
 80009ec:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <fsm_automatic_run3+0x270>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	4a56      	ldr	r2, [pc, #344]	; (8000b4c <fsm_automatic_run3+0x270>)
 80009f4:	6013      	str	r3, [r2, #0]
			if(button_flag[3]==1){
 80009f6:	4b56      	ldr	r3, [pc, #344]	; (8000b50 <fsm_automatic_run3+0x274>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	f040 8097 	bne.w	8000b2e <fsm_automatic_run3+0x252>
				button_flag[3]=0;
 8000a00:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
				RED_TIME=timer2*100;
 8000a06:	4b51      	ldr	r3, [pc, #324]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	4a52      	ldr	r2, [pc, #328]	; (8000b5c <fsm_automatic_run3+0x280>)
 8000a12:	6013      	str	r3, [r2, #0]
			break;
 8000a14:	e08b      	b.n	8000b2e <fsm_automatic_run3+0x252>
			toogleGreen();
 8000a16:	f7ff fdf3 	bl	8000600 <toogleGreen>
			toogleGreen1();
 8000a1a:	f7ff feb3 	bl	8000784 <toogleGreen1>
			if(timer2>99)timer2=0;
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b63      	cmp	r3, #99	; 0x63
 8000a24:	dd02      	ble.n	8000a2c <fsm_automatic_run3+0x150>
 8000a26:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
			timer=02;
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <fsm_automatic_run3+0x26c>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	601a      	str	r2, [r3, #0]
			if(button_flag[0]==1){
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d10f      	bne.n	8000a5a <fsm_automatic_run3+0x17e>
				button_flag[0]=0;
 8000a3a:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
				timer2=YELLOW_TIME/100;
 8000a40:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <fsm_automatic_run3+0x28c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a46      	ldr	r2, [pc, #280]	; (8000b60 <fsm_automatic_run3+0x284>)
 8000a46:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4a:	1152      	asrs	r2, r2, #5
 8000a4c:	17db      	asrs	r3, r3, #31
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	4a3e      	ldr	r2, [pc, #248]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a52:	6013      	str	r3, [r2, #0]
				status3=MAN_YELLOW;
 8000a54:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <fsm_automatic_run3+0x260>)
 8000a56:	220d      	movs	r2, #13
 8000a58:	601a      	str	r2, [r3, #0]
			if(button_flag[1]==1){
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d107      	bne.n	8000a72 <fsm_automatic_run3+0x196>
				button_flag[1]=0;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
				timer2++;
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a70:	6013      	str	r3, [r2, #0]
			if(button_flag[2]==1){
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d107      	bne.n	8000a8a <fsm_automatic_run3+0x1ae>
				button_flag[2]=0;
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
				timer2--;
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4a31      	ldr	r2, [pc, #196]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a88:	6013      	str	r3, [r2, #0]
			if(button_flag[3]==1){
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d14f      	bne.n	8000b32 <fsm_automatic_run3+0x256>
				button_flag[3]=0;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
				YELLOW_TIME=timer2*100;
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2264      	movs	r2, #100	; 0x64
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	4a31      	ldr	r2, [pc, #196]	; (8000b68 <fsm_automatic_run3+0x28c>)
 8000aa4:	6013      	str	r3, [r2, #0]
			break;
 8000aa6:	e044      	b.n	8000b32 <fsm_automatic_run3+0x256>
			toogleYellow();
 8000aa8:	f7ff fdc0 	bl	800062c <toogleYellow>
			toogleYellow1();
 8000aac:	f7ff fe80 	bl	80007b0 <toogleYellow1>
			if(timer2>99)timer2=0;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b63      	cmp	r3, #99	; 0x63
 8000ab6:	dd02      	ble.n	8000abe <fsm_automatic_run3+0x1e2>
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
			timer=03;
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <fsm_automatic_run3+0x26c>)
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	601a      	str	r2, [r3, #0]
			if(button_flag[0]==1){
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d105      	bne.n	8000ad8 <fsm_automatic_run3+0x1fc>
				button_flag[0]=0;
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
				status3=INIT;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <fsm_automatic_run3+0x260>)
 8000ad4:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <fsm_automatic_run3+0x264>)
 8000ad6:	601a      	str	r2, [r3, #0]
			if(button_flag[1]==1){
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d107      	bne.n	8000af0 <fsm_automatic_run3+0x214>
				button_flag[1]=0;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
				timer2++;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000aee:	6013      	str	r3, [r2, #0]
			if(button_flag[2]==1){
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d107      	bne.n	8000b08 <fsm_automatic_run3+0x22c>
				button_flag[2]=0;
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
				timer2--;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000b06:	6013      	str	r3, [r2, #0]
			if(button_flag[3]==1){
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d112      	bne.n	8000b36 <fsm_automatic_run3+0x25a>
				button_flag[3]=0;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <fsm_automatic_run3+0x274>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
				YELLOW_TIME=timer2*100;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <fsm_automatic_run3+0x270>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2264      	movs	r2, #100	; 0x64
 8000b1c:	fb02 f303 	mul.w	r3, r2, r3
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <fsm_automatic_run3+0x28c>)
 8000b22:	6013      	str	r3, [r2, #0]
			break;
 8000b24:	e007      	b.n	8000b36 <fsm_automatic_run3+0x25a>
			break;
 8000b26:	bf00      	nop
 8000b28:	e006      	b.n	8000b38 <fsm_automatic_run3+0x25c>
			break;
 8000b2a:	bf00      	nop
 8000b2c:	e004      	b.n	8000b38 <fsm_automatic_run3+0x25c>
			break;
 8000b2e:	bf00      	nop
 8000b30:	e002      	b.n	8000b38 <fsm_automatic_run3+0x25c>
			break;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <fsm_automatic_run3+0x25c>
			break;
 8000b36:	bf00      	nop
	}
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	01605b22 	.word	0x01605b22
 8000b44:	20000064 	.word	0x20000064
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	20000018 	.word	0x20000018
 8000b50:	20000084 	.word	0x20000084
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004
 8000b5c:	2000000c 	.word	0x2000000c
 8000b60:	51eb851f 	.word	0x51eb851f
 8000b64:	20000014 	.word	0x20000014
 8000b68:	2000001c 	.word	0x2000001c

08000b6c <subkeyProcess>:

//unsigned char is_button_pressed_1s()


void subkeyProcess(unsigned char i)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	button_flag[i] = 1;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <subkeyProcess+0x20>)
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000084 	.word	0x20000084

08000b90 <button_reading>:
void button_reading()
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	e097      	b.n	8000ccc <button_reading+0x13c>
	{
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	494f      	ldr	r1, [pc, #316]	; (8000ce0 <button_reading+0x150>)
 8000ba2:	5c89      	ldrb	r1, [r1, r2]
 8000ba4:	4a4f      	ldr	r2, [pc, #316]	; (8000ce4 <button_reading+0x154>)
 8000ba6:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	494e      	ldr	r1, [pc, #312]	; (8000ce8 <button_reading+0x158>)
 8000bae:	5c89      	ldrb	r1, [r1, r2]
 8000bb0:	4a4b      	ldr	r2, [pc, #300]	; (8000ce0 <button_reading+0x150>)
 8000bb2:	54d1      	strb	r1, [r2, r3]
		switch (i)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	d836      	bhi.n	8000c28 <button_reading+0x98>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <button_reading+0x30>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be7 	.word	0x08000be7
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c13 	.word	0x08000c13
		{
			case 0:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000bd0:	79fc      	ldrb	r4, [r7, #7]
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	4845      	ldr	r0, [pc, #276]	; (8000cec <button_reading+0x15c>)
 8000bd8:	f000 fe5e 	bl	8001898 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <button_reading+0x158>)
 8000be2:	551a      	strb	r2, [r3, r4]
				break;
 8000be4:	e025      	b.n	8000c32 <button_reading+0xa2>
			case 1:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000be6:	79fc      	ldrb	r4, [r7, #7]
 8000be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bec:	483f      	ldr	r0, [pc, #252]	; (8000cec <button_reading+0x15c>)
 8000bee:	f000 fe53 	bl	8001898 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <button_reading+0x158>)
 8000bf8:	551a      	strb	r2, [r3, r4]
				break;
 8000bfa:	e01a      	b.n	8000c32 <button_reading+0xa2>
			case 2:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000bfc:	79fc      	ldrb	r4, [r7, #7]
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	483a      	ldr	r0, [pc, #232]	; (8000cec <button_reading+0x15c>)
 8000c04:	f000 fe48 	bl	8001898 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <button_reading+0x158>)
 8000c0e:	551a      	strb	r2, [r3, r4]
				break;
 8000c10:	e00f      	b.n	8000c32 <button_reading+0xa2>
			case 3:
				debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin);
 8000c12:	79fc      	ldrb	r4, [r7, #7]
 8000c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c18:	4834      	ldr	r0, [pc, #208]	; (8000cec <button_reading+0x15c>)
 8000c1a:	f000 fe3d 	bl	8001898 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <button_reading+0x158>)
 8000c24:	551a      	strb	r2, [r3, r4]
				break;
 8000c26:	e004      	b.n	8000c32 <button_reading+0xa2>
			default:
				debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <button_reading+0x158>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	54d1      	strb	r1, [r2, r3]
				break;
 8000c30:	bf00      	nop
		}
		if((debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]))
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <button_reading+0x154>)
 8000c36:	5cd2      	ldrb	r2, [r2, r3]
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4929      	ldr	r1, [pc, #164]	; (8000ce0 <button_reading+0x150>)
 8000c3c:	5ccb      	ldrb	r3, [r1, r3]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d141      	bne.n	8000cc6 <button_reading+0x136>
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <button_reading+0x150>)
 8000c46:	5cd2      	ldrb	r2, [r2, r3]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4927      	ldr	r1, [pc, #156]	; (8000ce8 <button_reading+0x158>)
 8000c4c:	5ccb      	ldrb	r3, [r1, r3]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d139      	bne.n	8000cc6 <button_reading+0x136>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i])
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <button_reading+0x160>)
 8000c56:	5cd2      	ldrb	r2, [r2, r3]
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4923      	ldr	r1, [pc, #140]	; (8000ce8 <button_reading+0x158>)
 8000c5c:	5ccb      	ldrb	r3, [r1, r3]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d014      	beq.n	8000c8c <button_reading+0xfc>
			{
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4920      	ldr	r1, [pc, #128]	; (8000ce8 <button_reading+0x158>)
 8000c68:	5c89      	ldrb	r1, [r1, r2]
 8000c6a:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <button_reading+0x160>)
 8000c6c:	54d1      	strb	r1, [r2, r3]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <button_reading+0x160>)
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d126      	bne.n	8000cc6 <button_reading+0x136>
				{
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <button_reading+0x164>)
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					subkeyProcess(i);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff71 	bl	8000b6c <subkeyProcess>
 8000c8a:	e01c      	b.n	8000cc6 <button_reading+0x136>
				}
			}
			else
			{
				counterForButtonPress1s[i]--;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <button_reading+0x164>)
 8000c90:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c94:	3a01      	subs	r2, #1
 8000c96:	b291      	uxth	r1, r2
 8000c98:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <button_reading+0x164>)
 8000c9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0)
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <button_reading+0x164>)
 8000ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10d      	bne.n	8000cc6 <button_reading+0x136>
				{
					if(buttonBuffer[i]== BUTTON_IS_PRESSED)
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <button_reading+0x160>)
 8000cae:	5cd3      	ldrb	r3, [r2, r3]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d108      	bne.n	8000cc6 <button_reading+0x136>
					{
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <button_reading+0x164>)
 8000cb8:	2164      	movs	r1, #100	; 0x64
 8000cba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						subkeyProcess(i);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff53 	bl	8000b6c <subkeyProcess>
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i++)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	f67f af64 	bls.w	8000b9c <button_reading+0xc>
					//buttonBuffer[i] = BUTTON_IS_RELEASED;
				}
			}
		}
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd90      	pop	{r4, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000050 	.word	0x20000050
 8000ce4:	2000004c 	.word	0x2000004c
 8000ce8:	20000054 	.word	0x20000054
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	20000048 	.word	0x20000048
 8000cf4:	20000058 	.word	0x20000058

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fae2 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f82e 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000d04:	f000 f868 	bl	8000dd8 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000d08:	f000 f8b2 	bl	8000e70 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <main+0x5c>)
 8000d0e:	f001 fa2b 	bl	8002168 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0 (1) ;
 8000d12:	2001      	movs	r0, #1
 8000d14:	f000 f9b8 	bl	8001088 <setTimer0>
  setTimer3 (2) ;
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f000 f9f1 	bl	8001100 <setTimer3>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 fsm_automatic_run1();
 8000d1e:	f7ff fc9b 	bl	8000658 <fsm_automatic_run1>
	 fsm_automatic_run2();
 8000d22:	f7ff fd5b 	bl	80007dc <fsm_automatic_run2>
	 fsm_automatic_run3();
 8000d26:	f7ff fdd9 	bl	80008dc <fsm_automatic_run3>
	 if (timer3_flag==1){
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <main+0x60>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d1f5      	bne.n	8000d1e <main+0x26>
		 timer3_flag=0;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <main+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
		 updateClockBuffer () ;
 8000d38:	f000 fa5e 	bl	80011f8 <updateClockBuffer>
		 update7SEG(index_led++);
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <main+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	4906      	ldr	r1, [pc, #24]	; (8000d5c <main+0x64>)
 8000d44:	600a      	str	r2, [r1, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb8e 	bl	8000468 <update7SEG>

		 setTimer3(5);
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	f000 f9d7 	bl	8001100 <setTimer3>
	 fsm_automatic_run1();
 8000d52:	e7e4      	b.n	8000d1e <main+0x26>
 8000d54:	200000a8 	.word	0x200000a8
 8000d58:	2000007c 	.word	0x2000007c
 8000d5c:	20000060 	.word	0x20000060

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	; 0x40
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2228      	movs	r2, #40	; 0x28
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fdb2 	bl	80028d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fdae 	bl	80018f8 <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000da2:	f000 f8de 	bl	8000f62 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	230f      	movs	r3, #15
 8000da8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f81a 	bl	8001df8 <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dca:	f000 f8ca 	bl	8000f62 <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3740      	adds	r7, #64	; 0x40
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000dfe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e0c:	2209      	movs	r2, #9
 8000e0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e1e:	f001 f953 	bl	80020c8 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e28:	f000 f89b 	bl	8000f62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e3a:	f001 fae9 	bl	8002410 <HAL_TIM_ConfigClockSource>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e44:	f000 f88d 	bl	8000f62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_TIM2_Init+0x94>)
 8000e56:	f001 fcb1 	bl	80027bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f000 f87f 	bl	8000f62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000a8 	.word	0x200000a8

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_GPIO_Init+0xb8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <MX_GPIO_Init+0xb8>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <MX_GPIO_Init+0xb8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_GPIO_Init+0xb8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <MX_GPIO_Init+0xb8>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_GPIO_Init+0xb8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000eba:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_GPIO_Init+0xbc>)
 8000ebc:	f000 fd03 	bl	80018c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	217f      	movs	r1, #127	; 0x7f
 8000ec4:	481a      	ldr	r0, [pc, #104]	; (8000f30 <MX_GPIO_Init+0xc0>)
 8000ec6:	f000 fcfe 	bl	80018c6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eca:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000ece:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_GPIO_Init+0xbc>)
 8000ee4:	f000 fb5e 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ee8:	237f      	movs	r3, #127	; 0x7f
 8000eea:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_GPIO_Init+0xc0>)
 8000f00:	f000 fb50 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin;
 8000f04:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_GPIO_Init+0xbc>)
 8000f1a:	f000 fb43 	bl	80015a4 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 ){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d109      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x26>
		timerRun0();
 8000f46:	f000 f8ef 	bl	8001128 <timerRun0>
		timerRun1();
 8000f4a:	f000 f907 	bl	800115c <timerRun1>
		timerRun2();
 8000f4e:	f000 f91f 	bl	8001190 <timerRun2>
		timerRun3();
 8000f52:	f000 f937 	bl	80011c4 <timerRun3>
		button_reading();
 8000f56:	f7ff fe1b 	bl	8000b90 <button_reading>


//		button_reading () ;
	}

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f66:	b672      	cpsid	i
}
 8000f68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <Error_Handler+0x8>

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_MspInit+0x60>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_MspInit+0x60>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	d113      	bne.n	800100a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201c      	movs	r0, #28
 8001000:	f000 fa99 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001004:	201c      	movs	r0, #28
 8001006:	f000 fab2 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 f977 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM2_IRQHandler+0x10>)
 800106e:	f001 f8c7 	bl	8002200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000a8 	.word	0x200000a8

0800107c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <setTimer0>:

int timer3_flag = 0;
int timer3_counter = 0;


void setTimer0(int duration){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 8001090:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <setTimer0+0x20>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <setTimer0+0x24>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
};
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000068 	.word	0x20000068
 80010ac:	20000064 	.word	0x20000064

080010b0 <setTimer1>:
void setTimer1(int duration){
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <setTimer1+0x20>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <setTimer1+0x24>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
};
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000070 	.word	0x20000070
 80010d4:	2000006c 	.word	0x2000006c

080010d8 <setTimer2>:
void setTimer2(int duration){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <setTimer2+0x20>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <setTimer2+0x24>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000078 	.word	0x20000078
 80010fc:	20000074 	.word	0x20000074

08001100 <setTimer3>:
void setTimer3(int duration){
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <setTimer3+0x20>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <setTimer3+0x24>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000080 	.word	0x20000080
 8001124:	2000007c 	.word	0x2000007c

08001128 <timerRun0>:





void timerRun0(){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0 )
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <timerRun0+0x2c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dd0b      	ble.n	800114c <timerRun0+0x24>
	{
		timer0_counter --;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <timerRun0+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <timerRun0+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
		if(timer0_counter <=0){
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <timerRun0+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	dc02      	bgt.n	800114c <timerRun0+0x24>
			timer0_flag=1;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <timerRun0+0x30>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
		}
	}
};
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000068 	.word	0x20000068
 8001158:	20000064 	.word	0x20000064

0800115c <timerRun1>:
void timerRun1(){
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0 )
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <timerRun1+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd0b      	ble.n	8001180 <timerRun1+0x24>
	{
		timer1_counter --;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <timerRun1+0x2c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a06      	ldr	r2, [pc, #24]	; (8001188 <timerRun1+0x2c>)
 8001170:	6013      	str	r3, [r2, #0]
		if(timer1_counter <=0){
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <timerRun1+0x2c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	dc02      	bgt.n	8001180 <timerRun1+0x24>
			timer1_flag=1;
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <timerRun1+0x30>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
		}
	}
};
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000070 	.word	0x20000070
 800118c:	2000006c 	.word	0x2000006c

08001190 <timerRun2>:
void timerRun2(){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	if(timer2_counter > 0 )
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <timerRun2+0x2c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd0b      	ble.n	80011b4 <timerRun2+0x24>
	{
		timer2_counter --;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <timerRun2+0x2c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <timerRun2+0x2c>)
 80011a4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <=0){
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <timerRun2+0x2c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dc02      	bgt.n	80011b4 <timerRun2+0x24>
			timer2_flag=1;
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <timerRun2+0x30>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		}
	}
};
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	20000078 	.word	0x20000078
 80011c0:	20000074 	.word	0x20000074

080011c4 <timerRun3>:

void timerRun3(){
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	if(timer3_counter > 0 )
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <timerRun3+0x2c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dd0b      	ble.n	80011e8 <timerRun3+0x24>
	{
		timer3_counter --;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <timerRun3+0x2c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <timerRun3+0x2c>)
 80011d8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <=0){
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <timerRun3+0x2c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dc02      	bgt.n	80011e8 <timerRun3+0x24>
			timer3_flag=1;
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <timerRun3+0x30>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
		}
	}
};
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000080 	.word	0x20000080
 80011f4:	2000007c 	.word	0x2000007c

080011f8 <updateClockBuffer>:

#include "updateClockBuffer.h"



void updateClockBuffer () {
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	led_buffer[0]=timer/10;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <updateClockBuffer+0x70>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <updateClockBuffer+0x74>)
 8001202:	fb82 1203 	smull	r1, r2, r2, r3
 8001206:	1092      	asrs	r2, r2, #2
 8001208:	17db      	asrs	r3, r3, #31
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <updateClockBuffer+0x78>)
 800120e:	6013      	str	r3, [r2, #0]
	led_buffer[1]=timer%10;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <updateClockBuffer+0x70>)
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <updateClockBuffer+0x74>)
 8001216:	fb83 2301 	smull	r2, r3, r3, r1
 800121a:	109a      	asrs	r2, r3, #2
 800121c:	17cb      	asrs	r3, r1, #31
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	1aca      	subs	r2, r1, r3
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <updateClockBuffer+0x78>)
 800122c:	605a      	str	r2, [r3, #4]
	led_buffer[2]=timer2/10;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <updateClockBuffer+0x7c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <updateClockBuffer+0x74>)
 8001234:	fb82 1203 	smull	r1, r2, r2, r3
 8001238:	1092      	asrs	r2, r2, #2
 800123a:	17db      	asrs	r3, r3, #31
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <updateClockBuffer+0x78>)
 8001240:	6093      	str	r3, [r2, #8]
	led_buffer[3]=timer2%10;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <updateClockBuffer+0x7c>)
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <updateClockBuffer+0x74>)
 8001248:	fb83 2301 	smull	r2, r3, r3, r1
 800124c:	109a      	asrs	r2, r3, #2
 800124e:	17cb      	asrs	r3, r1, #31
 8001250:	1ad2      	subs	r2, r2, r3
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	1aca      	subs	r2, r1, r3
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <updateClockBuffer+0x78>)
 800125e:	60da      	str	r2, [r3, #12]

}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000010 	.word	0x20000010
 800126c:	66666667 	.word	0x66666667
 8001270:	20000098 	.word	0x20000098
 8001274:	20000018 	.word	0x20000018

08001278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800129e:	f7ff feed 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f001 faf5 	bl	8002890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012a6:	f7ff fd27 	bl	8000cf8 <main>
  bx lr
 80012aa:	4770      	bx	lr
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80012b4:	08002928 	.word	0x08002928
  ldr r2, =_sbss
 80012b8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80012bc:	200000f8 	.word	0x200000f8

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x28>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x28>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f923 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fe44 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f93b 	bl	800158a <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f903 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000020 	.word	0x20000020
 8001348:	20000028 	.word	0x20000028
 800134c:	20000024 	.word	0x20000024

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_IncTick+0x20>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000028 	.word	0x20000028
 8001370:	200000f4 	.word	0x200000f4

08001374 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <HAL_GetTick+0x10>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200000f4 	.word	0x200000f4

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4906      	ldr	r1, [pc, #24]	; (8001420 <__NVIC_EnableIRQ+0x34>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f7ff ff90 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff2d 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff42 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff35 	bl	80013ec <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b08b      	sub	sp, #44	; 0x2c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e148      	b.n	800184a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015b8:	2201      	movs	r2, #1
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8137 	bne.w	8001844 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4aa3      	ldr	r2, [pc, #652]	; (8001868 <HAL_GPIO_Init+0x2c4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d05e      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015e0:	4aa1      	ldr	r2, [pc, #644]	; (8001868 <HAL_GPIO_Init+0x2c4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d875      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015e6:	4aa1      	ldr	r2, [pc, #644]	; (800186c <HAL_GPIO_Init+0x2c8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d058      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015ec:	4a9f      	ldr	r2, [pc, #636]	; (800186c <HAL_GPIO_Init+0x2c8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d86f      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015f2:	4a9f      	ldr	r2, [pc, #636]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d052      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015f8:	4a9d      	ldr	r2, [pc, #628]	; (8001870 <HAL_GPIO_Init+0x2cc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d869      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015fe:	4a9d      	ldr	r2, [pc, #628]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d04c      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001604:	4a9b      	ldr	r2, [pc, #620]	; (8001874 <HAL_GPIO_Init+0x2d0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d863      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800160a:	4a9b      	ldr	r2, [pc, #620]	; (8001878 <HAL_GPIO_Init+0x2d4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d046      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001610:	4a99      	ldr	r2, [pc, #612]	; (8001878 <HAL_GPIO_Init+0x2d4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d85d      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 8001616:	2b12      	cmp	r3, #18
 8001618:	d82a      	bhi.n	8001670 <HAL_GPIO_Init+0xcc>
 800161a:	2b12      	cmp	r3, #18
 800161c:	d859      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <HAL_GPIO_Init+0x80>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800169f 	.word	0x0800169f
 8001628:	08001679 	.word	0x08001679
 800162c:	0800168b 	.word	0x0800168b
 8001630:	080016cd 	.word	0x080016cd
 8001634:	080016d3 	.word	0x080016d3
 8001638:	080016d3 	.word	0x080016d3
 800163c:	080016d3 	.word	0x080016d3
 8001640:	080016d3 	.word	0x080016d3
 8001644:	080016d3 	.word	0x080016d3
 8001648:	080016d3 	.word	0x080016d3
 800164c:	080016d3 	.word	0x080016d3
 8001650:	080016d3 	.word	0x080016d3
 8001654:	080016d3 	.word	0x080016d3
 8001658:	080016d3 	.word	0x080016d3
 800165c:	080016d3 	.word	0x080016d3
 8001660:	080016d3 	.word	0x080016d3
 8001664:	080016d3 	.word	0x080016d3
 8001668:	08001681 	.word	0x08001681
 800166c:	08001695 	.word	0x08001695
 8001670:	4a82      	ldr	r2, [pc, #520]	; (800187c <HAL_GPIO_Init+0x2d8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001676:	e02c      	b.n	80016d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e029      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	3304      	adds	r3, #4
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e024      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	3308      	adds	r3, #8
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e01f      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	330c      	adds	r3, #12
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e01a      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a6:	2304      	movs	r3, #4
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e013      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	611a      	str	r2, [r3, #16]
          break;
 80016be:	e009      	b.n	80016d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	615a      	str	r2, [r3, #20]
          break;
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          break;
 80016d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d801      	bhi.n	80016de <HAL_GPIO_Init+0x13a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_Init+0x13e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	; 0xff
 80016e8:	d802      	bhi.n	80016f0 <HAL_GPIO_Init+0x14c>
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x152>
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3b08      	subs	r3, #8
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	210f      	movs	r1, #15
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	431a      	orrs	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8090 	beq.w	8001844 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_GPIO_Init+0x2dc>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_GPIO_Init+0x2dc>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_GPIO_Init+0x2dc>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173c:	4a51      	ldr	r2, [pc, #324]	; (8001884 <HAL_GPIO_Init+0x2e0>)
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a49      	ldr	r2, [pc, #292]	; (8001888 <HAL_GPIO_Init+0x2e4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1e0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_GPIO_Init+0x2e8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1dc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a47      	ldr	r2, [pc, #284]	; (8001890 <HAL_GPIO_Init+0x2ec>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1d8>
 8001778:	2302      	movs	r3, #2
 800177a:	e004      	b.n	8001786 <HAL_GPIO_Init+0x1e2>
 800177c:	2303      	movs	r3, #3
 800177e:	e002      	b.n	8001786 <HAL_GPIO_Init+0x1e2>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_GPIO_Init+0x1e2>
 8001784:	2300      	movs	r3, #0
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	f002 0203 	and.w	r2, r2, #3
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	4093      	lsls	r3, r2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001796:	493b      	ldr	r1, [pc, #236]	; (8001884 <HAL_GPIO_Init+0x2e0>)
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b0:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4937      	ldr	r1, [pc, #220]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017be:	4b35      	ldr	r3, [pc, #212]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4933      	ldr	r1, [pc, #204]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d8:	4b2e      	ldr	r3, [pc, #184]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	492d      	ldr	r1, [pc, #180]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4929      	ldr	r1, [pc, #164]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	4923      	ldr	r1, [pc, #140]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	43db      	mvns	r3, r3
 8001816:	491f      	ldr	r1, [pc, #124]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001818:	4013      	ands	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4919      	ldr	r1, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4915      	ldr	r1, [pc, #84]	; (8001894 <HAL_GPIO_Init+0x2f0>)
 8001840:	4013      	ands	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3301      	adds	r3, #1
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f aeaf 	bne.w	80015b8 <HAL_GPIO_Init+0x14>
  }
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	372c      	adds	r7, #44	; 0x2c
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	10320000 	.word	0x10320000
 800186c:	10310000 	.word	0x10310000
 8001870:	10220000 	.word	0x10220000
 8001874:	10210000 	.word	0x10210000
 8001878:	10120000 	.word	0x10120000
 800187c:	10110000 	.word	0x10110000
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40011000 	.word	0x40011000
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	807b      	strh	r3, [r7, #2]
 80018d2:	4613      	mov	r3, r2
 80018d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d6:	787b      	ldrb	r3, [r7, #1]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018dc:	887a      	ldrh	r2, [r7, #2]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e2:	e003      	b.n	80018ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	041a      	lsls	r2, r3, #16
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	611a      	str	r2, [r3, #16]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e26c      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8087 	beq.w	8001a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001918:	4b92      	ldr	r3, [pc, #584]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b04      	cmp	r3, #4
 8001922:	d00c      	beq.n	800193e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d112      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
 8001930:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d10b      	bne.n	8001956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193e:	4b89      	ldr	r3, [pc, #548]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x12c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d168      	bne.n	8001a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e246      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x76>
 8001960:	4b80      	ldr	r3, [pc, #512]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a7f      	ldr	r2, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e02e      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b7b      	ldr	r3, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7a      	ldr	r2, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e01d      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0xbc>
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a71      	ldr	r2, [pc, #452]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a6e      	ldr	r2, [pc, #440]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xd4>
 80019b4:	4b6b      	ldr	r3, [pc, #428]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fcce 	bl	8001374 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fcca 	bl	8001374 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1fa      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0xe4>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fcba 	bl	8001374 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fcb6 	bl	8001374 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1e6      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x10c>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d063      	beq.n	8001afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a32:	4b4c      	ldr	r3, [pc, #304]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	4b43      	ldr	r3, [pc, #268]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1ba      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4939      	ldr	r1, [pc, #228]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8c:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fc6f 	bl	8001374 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fc6b 	bl	8001374 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e19b      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
 8001acc:	e015      	b.n	8001afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fc4e 	bl	8001374 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001adc:	f7ff fc4a 	bl	8001374 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e17a      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d03a      	beq.n	8001b7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d019      	beq.n	8001b42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fc2e 	bl	8001374 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fc2a 	bl	8001374 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e15a      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f000 faa6 	bl	800208c <RCC_Delay>
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_RCC_OscConfig+0x274>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff fc14 	bl	8001374 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4e:	e00f      	b.n	8001b70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc10 	bl	8001374 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d908      	bls.n	8001b70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e140      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	42420000 	.word	0x42420000
 8001b6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	4b9e      	ldr	r3, [pc, #632]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e9      	bne.n	8001b50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80a6 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b97      	ldr	r3, [pc, #604]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b94      	ldr	r3, [pc, #592]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a93      	ldr	r2, [pc, #588]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b91      	ldr	r3, [pc, #580]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	4b8e      	ldr	r3, [pc, #568]	; (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d118      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc2:	4b8b      	ldr	r3, [pc, #556]	; (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a8a      	ldr	r2, [pc, #552]	; (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fbd1 	bl	8001374 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd6:	f7ff fbcd 	bl	8001374 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	; 0x64
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0fd      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x312>
 8001bfc:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a7a      	ldr	r2, [pc, #488]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e02d      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c12:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a75      	ldr	r2, [pc, #468]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a72      	ldr	r2, [pc, #456]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	e01c      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d10c      	bne.n	8001c4e <HAL_RCC_OscConfig+0x356>
 8001c34:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a6c      	ldr	r2, [pc, #432]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	e00b      	b.n	8001c66 <HAL_RCC_OscConfig+0x36e>
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a66      	ldr	r2, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b64      	ldr	r3, [pc, #400]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a63      	ldr	r2, [pc, #396]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d015      	beq.n	8001c9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fb81 	bl	8001374 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fb7d 	bl	8001374 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0ab      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	4b57      	ldr	r3, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0ee      	beq.n	8001c76 <HAL_RCC_OscConfig+0x37e>
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fb6b 	bl	8001374 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff fb67 	bl	8001374 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e095      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d105      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a47      	ldr	r2, [pc, #284]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8081 	beq.w	8001de2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d061      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d146      	bne.n	8001d82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_OscConfig+0x4fc>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fb3b 	bl	8001374 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff fb37 	bl	8001374 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e067      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d2a:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	492d      	ldr	r1, [pc, #180]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a19      	ldr	r1, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	4927      	ldr	r1, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_RCC_OscConfig+0x4fc>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fb0b 	bl	8001374 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff fb07 	bl	8001374 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e037      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x46a>
 8001d80:	e02f      	b.n	8001de2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <HAL_RCC_OscConfig+0x4fc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff faf4 	bl	8001374 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff faf0 	bl	8001374 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e020      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x498>
 8001dae:	e018      	b.n	8001de2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e013      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42420060 	.word	0x42420060

08001df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0d0      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4965      	ldr	r1, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0b8      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	494d      	ldr	r1, [pc, #308]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d040      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d115      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07f      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e073      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06b      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7ff fa44 	bl	8001374 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7ff fa40 	bl	8001374 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e053      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d210      	bcs.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e032      	b.n	8001fae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4916      	ldr	r1, [pc, #88]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d009      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	490e      	ldr	r1, [pc, #56]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f86:	f000 f821 	bl	8001fcc <HAL_RCC_GetSysClockFreq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	490a      	ldr	r1, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	5ccb      	ldrb	r3, [r1, r3]
 8001f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f9a2 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08002910 	.word	0x08002910
 8001fc4:	20000020 	.word	0x20000020
 8001fc8:	20000024 	.word	0x20000024

08001fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fcc:	b490      	push	{r4, r7}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fd4:	1d3c      	adds	r4, r7, #4
 8001fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fdc:	f240 2301 	movw	r3, #513	; 0x201
 8001fe0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x40>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x46>
 800200a:	e02d      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200e:	623b      	str	r3, [r7, #32]
      break;
 8002010:	e02d      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	0c9b      	lsrs	r3, r3, #18
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800201e:	4413      	add	r3, r2
 8002020:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002024:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	0c5b      	lsrs	r3, r3, #17
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800203e:	4413      	add	r3, r2
 8002040:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002044:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800204a:	fb02 f203 	mul.w	r2, r2, r3
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	e004      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_RCC_GetSysClockFreq+0xbc>)
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	623b      	str	r3, [r7, #32]
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb8>)
 800206a:	623b      	str	r3, [r7, #32]
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6a3b      	ldr	r3, [r7, #32]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bc90      	pop	{r4, r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	08002900 	.word	0x08002900
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	003d0900 	.word	0x003d0900

0800208c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <RCC_Delay+0x34>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <RCC_Delay+0x38>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0a5b      	lsrs	r3, r3, #9
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a8:	bf00      	nop
  }
  while (Delay --);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e5a      	subs	r2, r3, #1
 80020ae:	60fa      	str	r2, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f9      	bne.n	80020a8 <RCC_Delay+0x1c>
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000020 	.word	0x20000020
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e041      	b.n	800215e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe ff6e 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f000 fa6a 	bl	80025e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d001      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e035      	b.n	80021ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_TIM_Base_Start_IT+0x90>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_TIM_Base_Start_IT+0x4e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021aa:	d004      	beq.n	80021b6 <HAL_TIM_Base_Start_IT+0x4e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_TIM_Base_Start_IT+0x94>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d111      	bne.n	80021da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b06      	cmp	r3, #6
 80021c6:	d010      	beq.n	80021ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d8:	e007      	b.n	80021ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40000400 	.word	0x40000400

08002200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0202 	mvn.w	r2, #2
 800222c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f9b1 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f9a4 	bl	8002598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f9b3 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b04      	cmp	r3, #4
 8002268:	d122      	bne.n	80022b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d11b      	bne.n	80022b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0204 	mvn.w	r2, #4
 8002280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2202      	movs	r2, #2
 8002286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f987 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f97a 	bl	8002598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f989 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d122      	bne.n	8002304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0208 	mvn.w	r2, #8
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2204      	movs	r2, #4
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f95d 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f950 	bl	8002598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f95f 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b10      	cmp	r3, #16
 8002310:	d122      	bne.n	8002358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b10      	cmp	r3, #16
 800231e:	d11b      	bne.n	8002358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0210 	mvn.w	r2, #16
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2208      	movs	r2, #8
 800232e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f933 	bl	80025aa <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f926 	bl	8002598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f935 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10e      	bne.n	8002384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0201 	mvn.w	r2, #1
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fdd8 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	2b80      	cmp	r3, #128	; 0x80
 8002390:	d10e      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d107      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fa67 	bl	800287e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d107      	bne.n	80023dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8f9 	bl	80025ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0220 	mvn.w	r2, #32
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa32 	bl	800286c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x18>
 8002424:	2302      	movs	r3, #2
 8002426:	e0b3      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x180>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002446:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d03e      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xd0>
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	f200 8087 	bhi.w	8002578 <HAL_TIM_ConfigClockSource+0x168>
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	f000 8085 	beq.w	800257c <HAL_TIM_ConfigClockSource+0x16c>
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	d87f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d01a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xa2>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d87b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d050      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x116>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d877      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d03c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xf6>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d873      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d058      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x136>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d86f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d064      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x156>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d86b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d060      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x156>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d867      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x156>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d05a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024b0:	e062      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f000 f95c 	bl	800277e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e04e      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 f945 	bl	800277e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002502:	609a      	str	r2, [r3, #8]
      break;
 8002504:	e03b      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f000 f8bc 	bl	8002690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2150      	movs	r1, #80	; 0x50
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f913 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002524:	e02b      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 f8da 	bl	80026ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2160      	movs	r1, #96	; 0x60
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f903 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002544:	e01b      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 f89c 	bl	8002690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f8f3 	bl	800274a <TIM_ITRx_SetConfig>
      break;
 8002564:	e00b      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 f8ea 	bl	800274a <TIM_ITRx_SetConfig>
        break;
 8002576:	e002      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002578:	bf00      	nop
 800257a:	e000      	b.n	800257e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800257c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a25      	ldr	r2, [pc, #148]	; (8002688 <TIM_Base_SetConfig+0xa8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x28>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x28>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <TIM_Base_SetConfig+0xac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <TIM_Base_SetConfig+0xa8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0x52>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0x52>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <TIM_Base_SetConfig+0xac>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a07      	ldr	r2, [pc, #28]	; (8002688 <TIM_Base_SetConfig+0xa8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d103      	bne.n	8002678 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	615a      	str	r2, [r3, #20]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40000400 	.word	0x40000400

08002690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 030a 	bic.w	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	621a      	str	r2, [r3, #32]
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f023 0210 	bic.w	r2, r3, #16
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002716:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	031b      	lsls	r3, r3, #12
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002728:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	621a      	str	r2, [r3, #32]
}
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	f043 0307 	orr.w	r3, r3, #7
 800276c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800277e:	b480      	push	{r7}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	021a      	lsls	r2, r3, #8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	609a      	str	r2, [r3, #8]
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e041      	b.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d004      	beq.n	800282c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10c      	bne.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	4313      	orrs	r3, r2
 800283c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400

0800286c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <__libc_init_array>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	2600      	movs	r6, #0
 8002894:	4d0c      	ldr	r5, [pc, #48]	; (80028c8 <__libc_init_array+0x38>)
 8002896:	4c0d      	ldr	r4, [pc, #52]	; (80028cc <__libc_init_array+0x3c>)
 8002898:	1b64      	subs	r4, r4, r5
 800289a:	10a4      	asrs	r4, r4, #2
 800289c:	42a6      	cmp	r6, r4
 800289e:	d109      	bne.n	80028b4 <__libc_init_array+0x24>
 80028a0:	f000 f822 	bl	80028e8 <_init>
 80028a4:	2600      	movs	r6, #0
 80028a6:	4d0a      	ldr	r5, [pc, #40]	; (80028d0 <__libc_init_array+0x40>)
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <__libc_init_array+0x44>)
 80028aa:	1b64      	subs	r4, r4, r5
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	42a6      	cmp	r6, r4
 80028b0:	d105      	bne.n	80028be <__libc_init_array+0x2e>
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b8:	4798      	blx	r3
 80028ba:	3601      	adds	r6, #1
 80028bc:	e7ee      	b.n	800289c <__libc_init_array+0xc>
 80028be:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c2:	4798      	blx	r3
 80028c4:	3601      	adds	r6, #1
 80028c6:	e7f2      	b.n	80028ae <__libc_init_array+0x1e>
 80028c8:	08002920 	.word	0x08002920
 80028cc:	08002920 	.word	0x08002920
 80028d0:	08002920 	.word	0x08002920
 80028d4:	08002924 	.word	0x08002924

080028d8 <memset>:
 80028d8:	4603      	mov	r3, r0
 80028da:	4402      	add	r2, r0
 80028dc:	4293      	cmp	r3, r2
 80028de:	d100      	bne.n	80028e2 <memset+0xa>
 80028e0:	4770      	bx	lr
 80028e2:	f803 1b01 	strb.w	r1, [r3], #1
 80028e6:	e7f9      	b.n	80028dc <memset+0x4>

080028e8 <_init>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr

080028f4 <_fini>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr
